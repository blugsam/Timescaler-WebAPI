// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Timescaler.Infrastructure.Data;

#nullable disable

namespace Timescaler.Infrastructure.Migrations
{
    [DbContext(typeof(TimescalerDbContext))]
    partial class TimescalerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Timescaler.Domain.Entities.RawValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("ExecutionTime")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ResultId", "Date" }, "IX_Values_ResultId_Date_Desc")
                        .IsDescending(false, true);

                    b.ToTable("Values", null, t =>
                        {
                            t.HasCheckConstraint("CK_Values_Date_Range", "\"Date\" >= '2000-01-01T00:00:00Z' AND \"Date\" <= NOW()");

                            t.HasCheckConstraint("CK_Values_ExecutionTime_Positive", "\"ExecutionTime\" >= 0");

                            t.HasCheckConstraint("CK_Values_Value_Positive", "\"Value\" >= 0");
                        });
                });

            modelBuilder.Entity("Timescaler.Domain.Entities.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AverageExecutionTime")
                        .HasColumnType("double precision");

                    b.Property<decimal>("AverageValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<DateTime>("FirstOperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("MedianValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("MinValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<TimeSpan>("TimeDelta")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("AverageExecutionTime");

                    b.HasIndex("AverageValue");

                    b.HasIndex("FirstOperationDate");

                    b.HasIndex(new[] { "FileName" }, "IX_Results_FileName_Unique")
                        .IsUnique();

                    b.ToTable("Results", null, t =>
                        {
                            t.HasCheckConstraint("CK_Results_TimeDelta_Positive", "\"TimeDelta\" >= INTERVAL '0 seconds'");
                        });
                });

            modelBuilder.Entity("Timescaler.Domain.Entities.RawValue", b =>
                {
                    b.HasOne("Timescaler.Domain.Entities.Result", "Result")
                        .WithMany("RawValues")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Timescaler.Domain.Entities.Result", b =>
                {
                    b.Navigation("RawValues");
                });
#pragma warning restore 612, 618
        }
    }
}
